#!/bin/bash

APP_DIR="$1"
ENV_DIR="$3"

# load required environment variables
GIT_REPO_URL=$(<"$ENV_DIR/GIT_REPO_URL")
GIT_REPO_DEPLOY_KEY=$(<"$ENV_DIR/GIT_REPO_DEPLOY_KEY")
GIT_SUBMODULE_DEPLOY_KEY=$(<"$ENV_DIR/GIT_SUBMODULE_DEPLOY_KEY")

if [[ -z $GIT_REPO_URL ]]; then
    echo "Did you forget to set GIT_REPO_URL?"
    exit 1
fi

if [[ -z $GIT_REPO_DEPLOY_KEY ]]; then
    echo "Did you forget to set GIT_REPO_DEPLOY_KEY?"
    exit 1
fi

if [[ -z $GIT_SUBMODULE_DEPLOY_KEY ]]; then
    echo "Did you forget to set GIT_SUBMODULE_DEPLOY_KEY?"
    exit 1
fi

# make sure we're in the root of the app dir
cd "$APP_DIR"

# remove existing .gitmodules, we'll check out it again
rm .gitmodules

# create an empty repo to fetch into
git init -q

# enable sparse checkouts, this will avoid checking out
# all the files in the repo, we'll only check out .gitmodules
git config core.sparseCheckout true
echo ".gitmodules" > .git/info/sparse-checkout

# add the repo as a remote and fetch the repo's history
git remote add origin "$GIT_REPO_URL"

# install the ssh key
mkdir -p ~/.ssh
ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2> /dev/null
cat "$ENV_DIR/GIT_REPO_DEPLOY_KEY" > ~/.ssh/repo_deploy_key
chmod 600 ~/.ssh/repo_deploy_key
cat "$ENV_DIR/GIT_SUBMODULE_DEPLOY_KEY" > ~/.ssh/submodule_deploy_key
chmod 600 ~/.ssh/submodule_deploy_key

# ignore/hide ssh warnings
# add deploy keys to ssh config
echo "Host git-repo *" >> ~/.ssh/config
echo "   StrictHostKeyChecking no" >> ~/.ssh/config
echo "   UserKnownHostsFile /dev/null" >> ~/.ssh/config
echo "   IdentityFile ~/.ssh/repo_deploy_key" >> ~/.ssh/config
echo "   LogLevel ERROR" >> ~/.ssh/config
echo "" >> ~/.ssh/config
echo "-----> Installed SSH key from GIT_REPO_DEPLOY_KEY"
echo "Host git-submodule *" >> ~/.ssh/config
echo "   StrictHostKeyChecking no" >> ~/.ssh/config
echo "   UserKnownHostsFile /dev/null" >> ~/.ssh/config
echo "   IdentityFile ~/.ssh/submodule_deploy_key" >> ~/.ssh/config
echo "   LogLevel ERROR" >> ~/.ssh/config
echo "-----> Installed SSH key from GIT_SUBMODULE_DEPLOY_KEY"

# checkout the revision that's being deployed
git fetch -q --depth 1 origin -a > /dev/null
git checkout -q ${SOURCE_VERSION:-master} > /dev/null
echo "-----> Fetched shallow history from $GIT_REPO_URL"

# initialize the submodule
git submodule -q update --init --recursive
echo "-----> Checked out submodule"
git submodule status | sed 's/^/       * /'
